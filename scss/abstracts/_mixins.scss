@use "sass:map";
@use "variables" as *;
@use "../layout/breakpoints" as *;

@mixin transition($property: all, $duration: 0.3s, $delay: 0s, $easing-function: ease-out)
{
    transition: $property $duration $delay $easing-function;
}

@mixin boxShadow($x: 0, $y: 0, $blur: 0.15rem, $color: rgba(#000, 0.1)) {
    box-shadow: $x $y $blue $color;
}

@mixin customScrollbar($width: 0.5rem, $height: 0.5rem, $bg-color: var(--e-gray-600-clr)) {
    // Firefox
    scrollbar-width: thin;
    scrollbar-color: $bg-color transparent;

    // Chrome and others
    &::-webkit-scrollbar-track {
        box-shadow: inset 0 0 0.2rem transparent;
        background: transparent;
        margin: 1.1rem;
    }

    &::-webkit-scrollbar {
        height: $height;
        width: $width;
        background: transparent;
    }

    &::-webkit-scrollbar-thumb {
        border-radius: 6rem;
        width: $width;
        background-color: $bg-color;
    }
}

@mixin grid($total, $number) {
    flex: 0 0 calc(100% / (#{$total} / #{$number}));
    max-width: calc(100% / (#{$total} / #{$number}));
}

@mixin offset-grid($total-cols, $responsive) {
    @if $responsive {
        @each $break, $value in $containers {
            @include respond(#{$break}) {
                @for $i from 1 through $total-cols {
                    .j-offset-#{$break}-#{$i} {
                        @if $i ==$total-cols {
                            margin-left: 0;
                            flex: 0 0 100%;
                            max-width: 100%;
                        }

                        @else {
                            margin-left: calc(100% / (#{$total-cols} / #{$i}));
                            flex: 0 0 calc(100% * ((#{$total-cols} - #{$i}) / #{$total-cols}));
                            max-width: calc(100% * ((#{$total-cols} - #{$i}) / #{$total-cols}));
                        }
                    }
                }
            }
        }
    }

    @else {
        @for $i from 1 through $total-cols {
            .j-offset-#{$i} {
                @if $i ==$total-cols {
                    margin-left: 0;
                    flex: 0 0 100%;
                    max-width: 100%;
                }

                @else {
                    margin-left: calc(100% / (#{$total-cols} / #{$i}));
                    flex: 0 0 calc(100% * ((#{$total-cols} - #{$i}) / #{$total-cols}));
                    max-width: calc(100% * ((#{$total-cols} - #{$i}) / #{$total-cols}));
                }
            }
        }
    }
}

@mixin loopt-list-property($property, $value, $important) {
    @if type-of($property)==list {
        @each $curr-property in $property {
            #{$curr-property}: #{$value} if($important, !important, unquote(""));
        }
    }

    @else {
        #{$property}: #{$value} if($important, !important, unquote(""));
    }
}

@mixin loop-trough-map($map, $base-class: "j-", $suffix: null, $property: null, $responsive: true, $important: true) {
    @each $child, $value in $map {
        @if $value !=null {
            @if $base-class ==null {
                #{$child} {
                    @include loopt-list-property($property, $value, $important);
                }
            }

            @else {
                .#{$base-class}#{$child}#{$suffix} {
                    @include loopt-list-property($property, $value, $important);
                }
            }
        }
    }

    @if $responsive {

        @each $break, $value in $breakpoints-up {
            @include respond(#{$break}) {
                @each $child, $value in $map {
                    @if $value !=null {
                        @if $base-class ==null {
                            #{$child} {
                                @include loopt-list-property($property, $value, $important);
                            }
                        }

                        @else {
                            .#{$base-class}#{$child}#{$suffix}-#{$break} {
                                @include loopt-list-property($property, $value, $important);
                            }
                        }
                    }
                }
            }
        }
    }
}

@mixin loop-dee-map($deep-map) {
    @each $block, $children in $deep-map {
        @each $subblock, $values in $children {
            $base-class: map.get($children, class);
            $suffix: map.get($children, suffix);
            $property: map.get($children, property);
            $responsive: if(map-has-key($children, responsive), map.get($children, responsive), true);
            $important: if(map-has-key($children, important), map.get($children, important), true);

            @if type-of($values)==map and $values !=null and $base-class !=null {
                @include loop-trough-map($values, $base-class, $suffix, $property, $responsive, $important);
            }
        }
    }
}